#!/usr/bin/env python3
"""
Script de depuraci√≥n para identificar problemas en el chat
"""

import os
import google.generativeai as genai
from ai_analyzer import AIAnalyzer

def debug_chat():
    """Depura el problema del chat paso a paso"""
    print("üîç Depurando problema del chat...")
    
    # API Key hardcodeada
    api_key = "bbfe_key_55DzECZtUTOPicncc14IaAjjl98QeN9yMTdco6fPeUfzAQgfoUgR-GgMvBT1ljyAyiHZpVAkCepRs8ttQ34be-l-ji"
    
    print(f"üîë API Key: {api_key[:20]}...")
    
    # Paso 1: Probar configuraci√≥n b√°sica de Gemini
    print("\n1Ô∏è‚É£ Probando configuraci√≥n b√°sica de Gemini...")
    try:
        genai.configure(api_key=api_key)
        print("‚úÖ Gemini configurado correctamente")
    except Exception as e:
        print(f"‚ùå Error configurando Gemini: {e}")
        return False
    
    # Paso 2: Probar modelo
    print("\n2Ô∏è‚É£ Probando modelo Gemini...")
    try:
        model = genai.GenerativeModel("gemini-2.0-flash-exp")
        print("‚úÖ Modelo Gemini creado correctamente")
    except Exception as e:
        print(f"‚ùå Error creando modelo: {e}")
        return False
    
    # Paso 3: Probar llamada simple
    print("\n3Ô∏è‚É£ Probando llamada simple a Gemini...")
    try:
        response = model.generate_content("Hola, responde solo 'OK'")
        if response and response.text:
            print(f"‚úÖ Respuesta simple exitosa: {response.text}")
        else:
            print("‚ùå Respuesta vac√≠a de Gemini")
            return False
    except Exception as e:
        print(f"‚ùå Error en llamada simple: {e}")
        return False
    
    # Paso 4: Probar AIAnalyzer
    print("\n4Ô∏è‚É£ Probando AIAnalyzer...")
    try:
        analyzer = AIAnalyzer(
            api_key=api_key,
            connection_id="f3737a7e-f05f-427b-9591-cdc6feb7c0a4"
        )
        print("‚úÖ AIAnalyzer creado correctamente")
    except Exception as e:
        print(f"‚ùå Error creando AIAnalyzer: {e}")
        return False
    
    # Paso 5: Probar chat_response
    print("\n5Ô∏è‚É£ Probando chat_response...")
    try:
        contexto_prueba = {
            "analisis": {"tipo": "test"},
            "problemas": [],
            "recomendaciones": []
        }
        
        respuesta = analyzer.chat_response("Hola", contexto_prueba)
        print(f"‚úÖ chat_response exitoso: {respuesta[:100]}...")
        
    except Exception as e:
        print(f"‚ùå Error en chat_response: {e}")
        return False
    
    print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
    return True

if __name__ == "__main__":
    success = debug_chat()
    if not success:
        print("\n‚ùå Se encontraron problemas durante la depuraci√≥n.")

