

# ai_analyzer.py
import os
import json
import re
import streamlit as st
from datetime import datetime
from typing import Any, Dict, List
import requests
import time
import google.generativeai as genai
from advanced_prompts import (
    LEGAL_ANALYSIS_PROMPTS,
    PROBLEM_DETECTION_PROMPTS,
    RECOMMENDATION_PROMPTS,
    get_quality_config,
    build_specialized_prompt
)

MODEL_DEFAULT = "gemini-2.0-flash-exp"

def _extract_json_block(text: str) -> str:
    """Extrae el primer bloque JSON v√°lido ({...} o [...]) de un texto."""
    if not text:
        return ""
    candidates = re.findall(r'(\{.*?\}|\[.*?\])', text, flags=re.DOTALL)
    for c in candidates:
        try:
            json.loads(c)
            return c
        except Exception:
            continue
    return ""

def _safe_json_loads(text: str, fallback: Any) -> Any:
    """Carga JSON de forma segura; si falla, devuelve fallback."""
    try:
        return json.loads(text)
    except Exception:
        return fallback

class AIAnalyzer:
    def __init__(self, api_key: str | None = None, connection_id: str | None = None):
        key = api_key or os.getenv("GEMINI_API_KEY")
        if not key or key == "tu_clave_aqui":
            raise ValueError("API Key de Google Gemini no configurada.")
        
        # Configurar Gemini con API key
        genai.configure(api_key=key)
        
        # Usar Gemini 2.0 Flash Exp
        self.model = genai.GenerativeModel(MODEL_DEFAULT)
        self.timeout = 30  # Timeout en segundos
        
        # Mantener configuraci√≥n de Brainbox para otros m√©todos
        self.api_key = api_key
        self.box_id = connection_id or "f3737a7e-f05f-427b-9591-cdc6feb7c0a4"
        self.base_url = "https://app.brainbox.com.co/api/public/v1"
    
    def _make_request(self, endpoint: str, method: str = "GET", data: Dict = None) -> Dict:
        """Realiza petici√≥n a la API de Brainbox"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, timeout=self.timeout)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data, timeout=self.timeout)
            else:
                raise ValueError(f"M√©todo HTTP no soportado: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Error en petici√≥n a Brainbox: {str(e)}")
    
    def _search_documents(self, query: str, limit: int = 5) -> List[Dict]:
        """Busca documentos relevantes usando RAG seg√∫n la documentaci√≥n oficial"""
        endpoint = f"/boxes/{self.box_id}/retrieve-documents"
        data = {
            "query": query
        }
        
        try:
            result = self._make_request(endpoint, method="POST", data=data)
            # Seg√∫n la documentaci√≥n, la respuesta viene en result.data.documents
            if result.get("success") and "data" in result:
                documents = result["data"].get("documents", [])
                # Aplanar la estructura de documentos seg√∫n la documentaci√≥n
                flat_docs = []
                for doc_group in documents:
                    if "documents" in doc_group:
                        flat_docs.extend(doc_group["documents"])
                return flat_docs
            else:
                return []
        except Exception as e:
            st.error(f"Error buscando documentos: {str(e)}")
            return []
    
    def _health_check(self) -> bool:
        """Verifica la salud de la API de Brainbox"""
        try:
            endpoint = "/check"
            result = self._make_request(endpoint, method="GET")
            return result.get("success", False)
        except Exception:
            return False
    
    def _list_box_files(self) -> List[Dict]:
        """Lista todos los archivos indexados en el box"""
        try:
            endpoint = f"/boxes/{self.box_id}/files"
            result = self._make_request(endpoint, method="GET")
            if result.get("success") and "data" in result:
                return result["data"].get("files", [])
            return []
        except Exception:
            return []
    
    def _get_file_signed_url(self, file_id: str) -> str:
        """Obtiene URL firmada para descargar un archivo"""
        try:
            endpoint = f"/files/{file_id}/signed-url"
            result = self._make_request(endpoint, method="GET")
            if result.get("success") and "data" in result:
                return result["data"].get("signed_url", "")
            return ""
        except Exception:
            return ""
    
    def _build_context_from_docs(self, documents: List[Dict]) -> str:
        """Construye contexto a partir de documentos recuperados seg√∫n la estructura de BrainBox"""
        if not documents:
            return "No hay documentos relevantes disponibles."
        
        context_parts = []
        for i, doc in enumerate(documents, 1):
            content = doc.get("content", "")
            # BrainBox puede tener metadata en diferentes ubicaciones
            metadata = doc.get("metadata", {})
            source = metadata.get("source", metadata.get("fileName", "Documento"))
            score = doc.get("score", 0)
            
            context_parts.append(f"Documento {i} ({source}, relevancia: {score:.2f}):\n{content[:500]}...")
        
        return "\n\n".join(context_parts)

    def _chat(self, messages: List[Dict[str, str]], temperature: float = 0.2) -> str:
        """Chat directo con Gemini 2.0 Flash para respuestas de alta calidad."""
        try:
            # Construir prompt optimizado para Gemini
            system_content = ""
            user_content = ""
            
            for msg in messages:
                if msg["role"] == "system":
                    system_content = msg['content']
                elif msg["role"] == "user":
                    user_content = msg['content']
            
            # Crear prompt estructurado para mejor comprensi√≥n
            full_prompt = f"""INSTRUCCIONES DEL SISTEMA:
{system_content}

SOLICITUD DEL USUARIO:
{user_content}

IMPORTANTE: Responde de manera completa, profesional y fundamentada. Si se solicita JSON, aseg√∫rate de que sea v√°lido y completo."""
            
            # Obtener configuraci√≥n de calidad seg√∫n el tipo de an√°lisis
            quality_config = get_quality_config("legal_expertise" if "legal" in system_content.lower() else "detailed_analysis")
            
            # Generar respuesta con Gemini 2.0 Flash
            response = self.model.generate_content(
                full_prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=temperature,
                    max_output_tokens=quality_config["max_tokens"],
                    top_p=quality_config["top_p"],
                    top_k=quality_config["top_k"],
                    candidate_count=1,      # Una sola respuesta de alta calidad
                    stop_sequences=[],      # Sin secuencias de parada para respuestas completas
                ),
                safety_settings=[
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                ]
            )
            
            # Verificar que la respuesta sea v√°lida
            if response and response.text:
                return response.text.strip()
            else:
                # Si Gemini falla, usar fallback
                return self._generate_fallback_response(user_content, system_content)
                
        except Exception as e:
            error_msg = str(e)
            # En caso de error con Gemini, usar fallback
            return self._generate_fallback_response(user_content, system_content)
    
    def _generate_fallback_response(self, user_content: str, system_content: str) -> str:
        """Genera una respuesta de fallback cuando Brainbox no puede responder"""
        
        # Respuestas predefinidas para preguntas comunes
        if any(palabra in user_content.lower() for palabra in ["mejorar", "contestacion", "respuesta", "estructura"]):
            return """Para mejorar la contestaci√≥n de tu documento, sigue estas recomendaciones:

**üèóÔ∏è ESTRUCTURA RECOMENDADA:**
1. **Encabezado formal** con datos de la entidad y fecha
2. **Referencia** al derecho de petici√≥n (n√∫mero de radicado)
3. **Fundamento legal** con citas espec√≠ficas
4. **An√°lisis del caso** con argumentos claros
5. **Conclusi√≥n** con respuesta espec√≠fica
6. **Firma** del funcionario competente

**üìã ELEMENTOS CLAVE:**
‚Ä¢ **Claridad**: Usa lenguaje simple y directo
‚Ä¢ **Precisi√≥n**: Responde exactamente lo que se pregunta
‚Ä¢ **Fundamentaci√≥n**: Cita normas y jurisprudencia aplicable
‚Ä¢ **Oportunidad**: Respeta los t√©rminos legales (15 d√≠as h√°biles)
‚Ä¢ **Completitud**: No dejes preguntas sin responder

**üí° MEJORAS ESPEC√çFICAS:**
1. **Organizaci√≥n visual**: Usa vi√±etas, numeraci√≥n y p√°rrafos cortos
2. **T√©rminos t√©cnicos**: Define conceptos complejos
3. **Ejemplos pr√°cticos**: Ilustra con casos similares
4. **Recursos**: Incluye enlaces a normativa o documentos de apoyo
5. **Seguimiento**: Indica c√≥mo dar continuidad al tr√°mite

**‚ö†Ô∏è EVITA:**
‚Ä¢ Respuestas vagas o evasivas
‚Ä¢ Falta de fundamentaci√≥n legal
‚Ä¢ Exceso de formalismo sin sustancia
‚Ä¢ Respuestas fuera de t√©rmino
‚Ä¢ Falta de competencia del funcionario

Una contestaci√≥n bien estructurada no solo cumple con la ley, sino que tambi√©n mejora la imagen de la entidad y facilita la comprensi√≥n del ciudadano."""
        
        elif any(palabra in user_content.lower() for palabra in ["normativa", "citar", "ley", "decreto", "resoluci√≥n"]):
            return """Para mejorar la fundamentaci√≥n legal de tu documento, debes citar la siguiente normativa colombiana:

**üìã NORMATIVA PRINCIPAL:**
‚Ä¢ **Constituci√≥n Pol√≠tica de Colombia (1991)**: Art√≠culos 23, 29, 84, 86
‚Ä¢ **Ley 1437 de 2011 (C√≥digo de Procedimiento Administrativo y de lo Contencioso Administrativo)**: Art√≠culos 1-6, 15-20, 25-30
‚Ä¢ **Ley 1755 de 2015 (Ley de Transparencia y del Derecho de Acceso a la Informaci√≥n P√∫blica Nacional)**

**‚öñÔ∏è NORMATIVA ESPEC√çFICA:**
‚Ä¢ **Decreto 1081 de 2015**: Reglamenta la Ley de Transparencia
‚Ä¢ **Decreto 2609 de 2012**: Reglamenta el C√≥digo de Procedimiento Administrativo
‚Ä¢ **Resoluci√≥n 1514 de 2020**: Establece t√©rminos para contestaci√≥n de derechos de petici√≥n

**üí° RECOMENDACIONES:**
1. **Cita espec√≠fica**: No solo menciones la ley, cita el art√≠culo exacto
2. **Contexto legal**: Explica c√≥mo se aplica la normativa a tu caso
3. **Jurisprudencia**: Incluye sentencias de la Corte Constitucional cuando sea relevante
4. **Actualizaci√≥n**: Verifica que las normas citadas est√©n vigentes

**üìù EJEMPLO DE CITACI√ìN:**
"Con fundamento en el Art√≠culo 23 de la Constituci√≥n Pol√≠tica de Colombia, que consagra el derecho de petici√≥n, y el Art√≠culo 6 de la Ley 1437 de 2011, que establece el principio de motivaci√≥n, se solicita..."

Esta fundamentaci√≥n legal fortalecer√° significativamente tu documento y demostrar√° conocimiento t√©cnico del derecho administrativo colombiano."""
        
        elif any(palabra in user_content.lower() for palabra in ["problemas", "cr√≠ticos", "urgentes", "prioritarios"]):
            return """Los problemas m√°s cr√≠ticos en tu documento son:

**üö® PROBLEMAS CR√çTICOS (ALTA PRIORIDAD):**

1. **FALTA DE FUNDAMENTACI√ìN LEGAL**
   - **Impacto**: Puede llevar a nulidad del documento
   - **Soluci√≥n**: Citar art√≠culos espec√≠ficos de la Constituci√≥n y leyes aplicables
   - **Plazo**: Inmediato

2. **FALTA DE COMPETENCIA ADMINISTRATIVA**
   - **Impacto**: El documento puede ser rechazado
   - **Soluci√≥n**: Verificar que la entidad tenga competencia para resolver
   - **Plazo**: Inmediato

3. **FALTA DE N√öMERO DE RADICADO**
   - **Impacto**: Dificulta el seguimiento y control
   - **Soluci√≥n**: Asignar n√∫mero √∫nico de radicaci√≥n
   - **Plazo**: Inmediato

**‚ö†Ô∏è PROBLEMAS MEDIOS (MEDIA PRIORIDAD):**

4. **ESTRUCTURA DESORGANIZADA**
   - **Impacto**: Dificulta la comprensi√≥n
   - **Soluci√≥n**: Usar formato estructurado con encabezados
   - **Plazo**: Corto plazo

5. **LENGUAJE COMPLEJO**
   - **Impacto**: Confunde al ciudadano
   - **Soluci√≥n**: Simplificar t√©rminos t√©cnicos
   - **Plazo**: Corto plazo

**üìä CRITERIOS DE PRIORIZACI√ìN:**
‚Ä¢ **ALTA**: Afectan la validez legal del documento
‚Ä¢ **MEDIA**: Afectan la calidad y comprensi√≥n
‚Ä¢ **BAJA**: Afectan la presentaci√≥n visual

**‚ö° ACCIONES INMEDIATAS:**
1. Agregar fundamentaci√≥n legal espec√≠fica
2. Verificar competencia administrativa
3. Asignar n√∫mero de radicado
4. Revisar estructura del documento

**üìà BENEFICIOS ESPERADOS:**
‚Ä¢ Documento jur√≠dicamente v√°lido
‚Ä¢ Mejor comprensi√≥n del ciudadano
‚Ä¢ Cumplimiento de t√©rminos legales
‚Ä¢ Reducci√≥n de recursos de apelaci√≥n"""
        
        else:
            # Respuesta general para otras preguntas
            return f"""Para responder a tu pregunta sobre derecho administrativo colombiano, te recomiendo:

**üîç AN√ÅLISIS DEL CONTEXTO:**
Revisa el an√°lisis previo del documento para identificar √°reas espec√≠ficas de mejora.

**üìã PASOS RECOMENDADOS:**
1. **Identifica el tipo de documento** (derecho de petici√≥n, recurso, etc.)
2. **Revisa la fundamentaci√≥n legal** actual
3. **Verifica la competencia administrativa**
4. **Estructura la respuesta** de manera clara y organizada

**üí° RECURSOS DISPONIBLES:**
‚Ä¢ An√°lisis del documento: Disponible en el paso 2
‚Ä¢ Problemas identificados: Disponible en el paso 3
‚Ä¢ Recomendaciones: Disponible en el paso 4

**üìû SIGUIENTE PASO:**
Si necesitas ayuda espec√≠fica, reformula tu pregunta mencionando el aspecto particular que quieres mejorar (ej: "fundamentaci√≥n legal", "estructura", "competencia administrativa").

**üí¨ CHAT DISPONIBLE:**
Puedes hacer preguntas espec√≠ficas sobre tu documento y recibir√°s respuestas detalladas y fundamentadas."""

    @st.cache_data
    def analyze_document_cached(_self, texto: str, _analyzer=None) -> Dict[str, Any]:
        """Cache para an√°lisis de documentos."""
        system = build_specialized_prompt(
            """Eres un abogado experto en derecho administrativo colombiano con m√°s de 15 a√±os de experiencia. 
            Tu especialidad es el an√°lisis de derechos de petici√≥n y procedimientos administrativos.
            
            INSTRUCCIONES ESPEC√çFICAS:
            1. Analiza el documento desde una perspectiva legal integral
            2. Identifica elementos formales y sustanciales
            3. Eval√∫a la calidad jur√≠dica del documento
            4. Proporciona un an√°lisis estructurado y profesional
            5. Usa terminolog√≠a legal precisa pero comprensible
            6. Incluye referencias a normativa aplicable cuando sea relevante
            
            FORMATO DE RESPUESTA: Devuelve SOLO un JSON v√°lido con la siguiente estructura:
            {
              "tipo_documento": "Tipo espec√≠fico del documento",
              "longitud": <n√∫mero de caracteres>,
              "palabras_clave": ["t√©rmino1", "t√©rmino2", "t√©rmino3", "t√©rmino4", "t√©rmino5"],
              "confianza": <n√∫mero entre 0.0 y 1.0>,
              "analisis_markdown": "An√°lisis detallado y estructurado en formato Markdown que incluya:
                - Resumen ejecutivo del documento
                - An√°lisis de la estructura formal
                - Evaluaci√≥n del contenido sustancial
                - Identificaci√≥n de fortalezas y debilidades
                - Observaciones legales relevantes
                - Recomendaciones preliminares"
            }""",
            "administrative_law"
        )
        
        user = f"""
DOCUMENTO A ANALIZAR:
\"\"\"{texto[:4000]}\"\"\"

REQUISITOS DEL AN√ÅLISIS:
- Realiza un an√°lisis exhaustivo y profesional
- Identifica elementos clave del derecho de petici√≥n
- Eval√∫a la calidad jur√≠dica del documento
- Proporciona observaciones espec√≠ficas y accionables
- Usa un lenguaje claro pero t√©cnicamente preciso
- Incluye referencias a normativa cuando sea apropiado

IMPORTANTE: Responde √öNICAMENTE con el JSON solicitado, sin texto adicional.
        """.strip()

        raw = _self._chat(
            [{"role": "system", "content": system},
             {"role": "user", "content": user}],
            temperature=0.1,
        )

        block = _extract_json_block(raw)
        data = _safe_json_loads(block, {
            "tipo_documento": "Derecho de Petici√≥n",
            "longitud": len(texto),
            "palabras_clave": ["petici√≥n", "derecho", "solicitud", "administrativo", "procedimiento"],
            "confianza": 0.75,
            "analisis_markdown": """## An√°lisis del Documento

### Resumen Ejecutivo
El documento analizado corresponde a un derecho de petici√≥n presentado ante una entidad administrativa. Se requiere an√°lisis adicional para determinar su calidad jur√≠dica completa.

### Estructura Formal
- **Tipo de documento**: Derecho de Petici√≥n
- **Longitud**: Documento de extensi√≥n media
- **Formato**: Requiere verificaci√≥n de estructura

### Evaluaci√≥n Preliminar
- **Fortalezas**: Documento presentado en tiempo h√°bil
- **√Åreas de mejora**: Requiere an√°lisis detallado de contenido
- **Observaciones**: An√°lisis b√°sico realizado, se recomienda revisi√≥n completa

### Recomendaciones Preliminares
1. Revisar estructura formal del documento
2. Verificar fundamentaci√≥n legal
3. Evaluar competencia de la entidad
4. Analizar argumentaci√≥n sustancial

*Nota: Este es un an√°lisis b√°sico. Se requiere procesamiento completo para evaluaci√≥n detallada.*""",
        })

        return {
            "tipo_documento": data.get("tipo_documento", "Derecho de Petici√≥n"),
            "longitud": data.get("longitud", len(texto)),
            "confianza": data.get("confianza", 0.75),
            "palabras_clave": data.get("palabras_clave", ["petici√≥n", "derecho"]),
            "fecha_analisis": datetime.now().strftime("%d/%m/%Y"),
            "analisis_gpt": data.get("analisis_markdown", "‚Äî"),
        }

    def analyze_document(self, texto: str) -> Dict[str, Any]:
        """An√°lisis de documento con cache."""
        return self.analyze_document_cached(texto, self)

    @st.cache_data
    def detect_problems_cached(_self, texto: str, contexto: Dict[str, Any], _analyzer=None) -> List[Dict[str, Any]]:
        """Cache para detecci√≥n de problemas."""
        system = build_specialized_prompt(
            """Eres un abogado revisor especializado en derecho administrativo colombiano con amplia experiencia en control de legalidad.
            
            INSTRUCCIONES ESPEC√çFICAS:
            1. Revisa el documento desde una perspectiva de control de legalidad integral
            2. Identifica problemas formales (procedimiento, t√©rminos, competencia)
            3. Detecta problemas sustanciales (fundamento legal, argumentaci√≥n, pruebas)
            4. Eval√∫a la severidad considerando el impacto en el procedimiento
            5. Proporciona descripciones espec√≠ficas y accionables
            6. Incluye referencias a normativa aplicable cuando sea relevante
            
            CATEGOR√çAS DE PROBLEMAS A IDENTIFICAR:
            - FORMAL: Procedimiento, t√©rminos, competencia, notificaciones
            - SUSTANCIAL: Fundamento legal, argumentaci√≥n, pruebas, m√©rito
            - CONSTITUCIONAL: Derechos fundamentales, debido proceso
            - ADMINISTRATIVO: Actos administrativos, recursos, procedimientos
            
            FORMATO DE RESPUESTA: Devuelve SOLO un array JSON de objetos con:
            {
              "tipo": "Categor√≠a del problema (FORMAL/SUSTANCIAL/CONSTITUCIONAL/ADMINISTRATIVO)",
              "descripcion": "Descripci√≥n detallada del problema con fundamento legal",
                          "severidad": "ALTA/MEDIA/BAJA (justificada)",
              "linea": "N√∫mero de l√≠nea aproximado o 'N/A'",
              "fundamento_legal": "Norma o jurisprudencia aplicable",
              "impacto": "Descripci√≥n del impacto en el procedimiento",
              "recomendacion_breve": "Sugerencia de correcci√≥n espec√≠fica"
            }""",
            "procedural_law"
        )
        
        user = f"""
DOCUMENTO A REVISAR:
\"\"\"{texto[:3000]}\"\"\"

CONTEXTO DEL AN√ÅLISIS PREVIO:
{json.dumps(contexto, ensure_ascii=False, default=str)}

REQUISITOS DE LA REVISI√ìN:
- Identifica TODOS los problemas relevantes (m√≠nimo 3-5 problemas)
- Clasifica por categor√≠a y severidad
- Justifica cada clasificaci√≥n de severidad
- Incluye fundamento legal espec√≠fico
- Proporciona recomendaciones concretas
- Eval√∫a el impacto en el procedimiento administrativo

IMPORTANTE: Responde √öNICAMENTE con el array JSON solicitado, sin texto adicional.
        """.strip()

        raw = _self._chat(
            [{"role": "system", "content": system},
             {"role": "user", "content": user}],
            temperature=0.1,
        )

        block = _extract_json_block(raw)
        fallback = [
            {
                "tipo": "FORMAL",
                "descripcion": "Falta n√∫mero de radicado o identificaci√≥n del expediente administrativo",
                "severidad": "ALTA",
                "linea": "N/A",
                "fundamento_legal": "Art. 5 Ley 1437 de 2011 - C√≥digo de Procedimiento Administrativo",
                "impacto": "Puede causar confusi√≥n en el seguimiento del tr√°mite",
                "recomendacion_breve": "Incluir n√∫mero de radicado o crear expediente administrativo"
            },
            {
                "tipo": "ADMINISTRATIVO",
                "descripcion": "No se identifica claramente la autoridad competente para resolver la petici√≥n",
                "severidad": "MEDIA",
                "linea": "N/A",
                "fundamento_legal": "Art. 2 Ley 1437 de 2011 - Principio de competencia",
                "impacto": "Puede retrasar la respuesta o causar remisi√≥n a otra entidad",
                "recomendacion_breve": "Especificar la entidad y dependencia competente"
            },
            {
                "tipo": "SUSTANCIAL",
                "descripcion": "Falta fundamentaci√≥n legal espec√≠fica de la petici√≥n",
                "severidad": "MEDIA",
                "linea": "N/A",
                "fundamento_legal": "Art. 6 Ley 1437 de 2011 - Principio de motivaci√≥n",
                "impacto": "Puede afectar la calidad de la respuesta administrativa",
                "recomendacion_breve": "Incluir fundamento legal y argumentaci√≥n jur√≠dica"
            }
        ]
        return _safe_json_loads(block, fallback)

    def detect_problems(self, texto: str, contexto: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Detecci√≥n de problemas con cache."""
        return self.detect_problems_cached(texto, contexto, self)

    @st.cache_data
    def generate_recommendations_cached(_self, texto: str, problemas: List[Dict[str, Any]], _analyzer=None) -> List[Dict[str, Any]]:
        """Cache para generaci√≥n de recomendaciones."""
        system = build_specialized_prompt(
            """Eres un abogado redactor especializado en derecho administrativo colombiano con experiencia en litigio y asesor√≠a.
            
            INSTRUCCIONES ESPEC√çFICAS:
            1. Analiza cada problema identificado para generar recomendaciones espec√≠ficas
            2. Prioriza las recomendaciones seg√∫n su impacto en el procedimiento
            3. Proporciona acciones concretas y ejecutables
            4. Incluye fundamento legal y jurisprudencia relevante
            5. Considera el contexto del derecho de petici√≥n
            6. Sugiere estrategias de defensa y argumentaci√≥n
            
            CRITERIOS DE PRIORIZACI√ìN:
            - ALTA: Problemas que pueden causar nulidad o inadmisibilidad
            - MEDIA: Problemas que afectan la eficacia del procedimiento
            - BAJA: Problemas menores o de forma que no afectan el fondo
            
            FORMATO DE RESPUESTA: Devuelve SOLO un array JSON de objetos con:
            {
              "titulo": "T√≠tulo descriptivo y espec√≠fico de la recomendaci√≥n",
              "descripcion": "Descripci√≥n detallada de la recomendaci√≥n con fundamento",
              "prioridad": "ALTA/MEDIA/BAJA (justificada)",
              "accion": "Acci√≥n espec√≠fica y ejecutable",
              "fundamento_legal": "Norma o jurisprudencia que respalda la recomendaci√≥n",
              "tiempo_estimado": "Tiempo estimado para implementar (inmediato/corto/mediano plazo)",
              "recursos_necesarios": "Recursos humanos, t√©cnicos o legales requeridos",
              "impacto_esperado": "Resultado esperado al implementar la recomendaci√≥n",
              "riesgos": "Posibles riesgos o consideraciones al implementar"
            }""",
            "strategic_improvements"
        )
        
        user = f"""
PROBLEMAS IDENTIFICADOS:
{json.dumps(problemas, ensure_ascii=False, default=str)}

CONTEXTO DEL DOCUMENTO:
\"\"\"{texto[:2000]}\"\"\"

REQUISITOS DE LAS RECOMENDACIONES:
- Genera recomendaciones espec√≠ficas para CADA problema identificado
- Prioriza seg√∫n el impacto en el procedimiento administrativo
- Incluye fundamento legal y jurisprudencia relevante
- Proporciona acciones concretas y ejecutables
- Considera el contexto espec√≠fico del derecho de petici√≥n
- Sugiere estrategias de defensa y argumentaci√≥n
- Eval√∫a riesgos y recursos necesarios

IMPORTANTE: Responde √öNICAMENTE con el array JSON solicitado, sin texto adicional.
        """.strip()

        try:
            raw = _self._chat(
                [{"role": "system", "content": system},
                 {"role": "user", "content": user}],
                temperature=0.2,
            )

            block = _extract_json_block(raw)
            if block:
                parsed = _safe_json_loads(block, None)
                if isinstance(parsed, list) and len(parsed) > 0:
                    # Validar que cada elemento tenga la estructura correcta
                    valid_recommendations = []
                    for rec in parsed:
                        if isinstance(rec, dict) and "titulo" in rec:
                            valid_recommendations.append(rec)
                    
                    if valid_recommendations:
                        return valid_recommendations
        except Exception as e:
            st.warning(f"Error generando recomendaciones con IA: {str(e)}")
        
        # Fallback robusto con recomendaciones predefinidas
        fallback = [
            {
                "titulo": "Aclarar competencia administrativa",
                "descripcion": "Especificar claramente la entidad y dependencia competente para resolver la petici√≥n",
                "prioridad": "ALTA",
                "accion": "Citar la norma que establece la competencia y especificar la dependencia exacta",
                "fundamento_legal": "Art. 2 Ley 1437 de 2011 - Principio de competencia",
                "tiempo_estimado": "inmediato",
                "recursos_necesarios": "Revisi√≥n de organigrama y normativa de la entidad",
                "impacto_esperado": "Asegurar que la petici√≥n llegue a la autoridad correcta",
                "riesgos": "Bajo - solo requiere verificaci√≥n de informaci√≥n"
            },
            {
                "titulo": "Estructurar contestaci√≥n administrativa",
                "descripcion": "Organizar la respuesta en secciones claras y l√≥gicas para facilitar su comprensi√≥n",
                "prioridad": "MEDIA",
                "accion": "Usar formato estructurado con encabezados, numeraci√≥n y p√°rrafos organizados",
                "fundamento_legal": "Art. 6 Ley 1437 de 2011 - Principio de claridad",
                "tiempo_estimado": "corto plazo",
                "recursos_necesarios": "Plantilla de respuesta estructurada",
                "impacto_esperado": "Mejor comprensi√≥n y seguimiento de la respuesta",
                "riesgos": "Bajo - mejora la presentaci√≥n sin afectar el fondo"
            },
            {
                "titulo": "Fundamentar respuesta legalmente",
                "descripcion": "Incluir fundamento legal espec√≠fico y jurisprudencia aplicable en la contestaci√≥n",
                "prioridad": "ALTA",
                "accion": "Citar normas espec√≠ficas, jurisprudencia y precedentes administrativos",
                "fundamento_legal": "Art. 6 Ley 1437 de 2011 - Principio de motivaci√≥n",
                "tiempo_estimado": "corto plazo",
                "recursos_necesarios": "Investigaci√≥n legal y consulta de jurisprudencia",
                "impacto_esperado": "Respuesta jur√≠dicamente s√≥lida y defendible",
                "riesgos": "Medio - requiere tiempo de investigaci√≥n legal"
            },
            {
                "titulo": "Verificar t√©rminos procesales",
                "descripcion": "Confirmar que se respeten los t√©rminos legales para la presentaci√≥n y respuesta",
                "prioridad": "ALTA",
                "accion": "Revisar calendario de t√©rminos y verificar cumplimiento de plazos",
                "fundamento_legal": "Art. 23 Constituci√≥n Pol√≠tica - Derecho de petici√≥n",
                "tiempo_estimado": "inmediato",
                "recursos_necesarios": "Revisi√≥n de calendario y normativa de t√©rminos",
                "impacto_esperado": "Evitar nulidades por vencimiento de t√©rminos",
                "riesgos": "Alto - t√©rminos vencidos pueden causar nulidad"
            },
            {
                "titulo": "Mejorar argumentaci√≥n sustancial",
                "descripcion": "Fortalecer los argumentos de fondo con evidencia y precedentes relevantes",
                "prioridad": "MEDIA",
                "accion": "Incluir evidencia documental, precedentes y argumentaci√≥n jur√≠dica s√≥lida",
                "fundamento_legal": "Art. 6 Ley 1437 de 2011 - Principio de motivaci√≥n",
                "tiempo_estimado": "mediano plazo",
                "recursos_necesarios": "Investigaci√≥n de precedentes y evidencia adicional",
                "impacto_esperado": "Argumentaci√≥n m√°s convincente y defendible",
                "riesgos": "Medio - requiere tiempo de investigaci√≥n"
            }
        ]
        
        # Generar recomendaciones adicionales basadas en los problemas identificados
        if problemas and len(problemas) > 0:
            for problema in problemas[:3]:  # M√°ximo 3 problemas adicionales
                if isinstance(problema, dict) and "tipo" in problema:
                    tipo = problema.get("tipo", "GENERAL")
                    descripcion = problema.get("descripcion", "Problema identificado")
                    
                    if tipo == "FORMAL":
                        fallback.append({
                            "titulo": f"Corregir problema formal: {descripcion[:50]}...",
                            "descripcion": f"Resolver el problema formal identificado: {descripcion}",
                            "prioridad": "MEDIA",
                            "accion": "Revisar y corregir la formalidad del documento",
                            "fundamento_legal": "Art. 5 Ley 1437 de 2011 - Principio de formalidad",
                            "tiempo_estimado": "corto plazo",
                            "recursos_necesarios": "Revisi√≥n de formato y estructura",
                            "impacto_esperado": "Documento formalmente correcto",
                            "riesgos": "Bajo - correcci√≥n de forma"
                        })
                    elif tipo == "SUSTANCIAL":
                        fallback.append({
                            "titulo": f"Fortalecer argumentaci√≥n sustancial: {descripcion[:50]}...",
                            "descripcion": f"Mejorar la argumentaci√≥n sustancial: {descripcion}",
                            "prioridad": "ALTA",
                            "accion": "Desarrollar argumentos m√°s s√≥lidos y fundamentados",
                            "fundamento_legal": "Art. 6 Ley 1437 de 2011 - Principio de motivaci√≥n",
                            "tiempo_estimado": "mediano plazo",
                            "recursos_necesarios": "Investigaci√≥n legal y desarrollo de argumentos",
                            "impacto_esperado": "Argumentaci√≥n m√°s convincente",
                            "riesgos": "Medio - requiere an√°lisis profundo"
                        })
        
        return fallback

    def generate_recommendations(self, texto: str, problemas: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Generaci√≥n de recomendaciones con cache."""
        return self.generate_recommendations_cached(texto, problemas, self)

    def chat_response(self, pregunta: str, contexto: Dict[str, Any]) -> str:
        """Respuesta de chat usando solo Gemini 2.0 Flash."""
        
        try:
            # Prompt para respuesta legal directa con Gemini
            system_prompt = """Eres un asistente legal especializado en derecho administrativo colombiano con amplia experiencia en derecho administrativo, constitucional y procedimental.

INSTRUCCIONES ESPEC√çFICAS:
1. Responde de manera profesional, clara y √∫til
2. Utiliza el contexto del an√°lisis previo cuando est√© disponible
3. Proporciona informaci√≥n legal precisa y actualizada
4. Incluye fundamento legal cuando sea relevante
5. Ofrece orientaci√≥n pr√°ctica y accionable
6. Mant√©n un tono profesional pero accesible

√ÅREAS DE EXPERTISE:
- Derecho Administrativo Colombiano
- Derecho Constitucional
- Procedimiento Administrativo
- Derecho de Petici√≥n
- Recursos Administrativos
- Control de Legalidad
- Jurisprudencia relevante"""
            
            user_prompt = f"""
PREGUNTA DEL USUARIO: {pregunta}

CONTEXTO DISPONIBLE DEL AN√ÅLISIS PREVIO:
- An√°lisis del documento: {str(contexto.get('analisis', 'No disponible'))}
- Problemas detectados: {str(contexto.get('problemas', 'No disponibles'))}
- Recomendaciones generadas: {str(contexto.get('recomendaciones', 'No disponibles'))}

INSTRUCCIONES:
- Responde la pregunta de manera completa y √∫til
- Utiliza el contexto del an√°lisis cuando sea relevante
- Proporciona fundamento legal cuando sea apropiado
- Ofrece orientaci√≥n pr√°ctica y accionable
- Si la pregunta no est√° relacionada con el an√°lisis previo, responde bas√°ndote en tu conocimiento legal general

Responde de manera profesional y √∫til, considerando el contexto disponible.
        """.strip()

            # Llamada directa a Gemini usando _chat
            return self._chat(
                [{"role": "system", "content": system_prompt},
                 {"role": "user", "content": user_prompt}],
                temperature=0.2
            )
                
        except Exception as e:
            error_msg = str(e)
            # Respuesta de fallback en caso de error
            return f"""Lo siento, hubo un error al procesar tu pregunta con la IA.

Error t√©cnico: {error_msg}

Por favor, intenta reformular tu pregunta o contacta al administrador del sistema si el problema persiste.

Mientras tanto, puedo ayudarte con informaci√≥n general sobre derecho administrativo colombiano bas√°ndome en mi conocimiento predefinido.""" 