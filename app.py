import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
import random
import os
from dotenv import load_dotenv

# Importar m√≥dulos personalizados
from document_processor import process_document
from ai_analyzer import AIAnalyzer

# Cargar variables de entorno
try:
    load_dotenv()
except:
    # Si hay problemas con .env, usar configuraci√≥n por defecto
    pass

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Contestaci√≥n Autom√°tica de Derechos de Petici√≥n",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .step-container {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        background: white;
        transition: all 0.3s ease;
    }
    
    .step-container.completed {
        border-color: #28a745;
        background: #f8fff9;
    }
    
    .step-container.active {
        border-color: #007bff;
        background: #f8f9ff;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        text-align: center;
        margin: 0.5rem;
    }
    
    .problem-card, .recommendation-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #ffc107;
    }
    
    .problem-card.high {
        border-left-color: #dc3545;
    }
    
    .recommendation-card.high {
        border-left-color: #28a745;
    }
    
    .chat-message {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #667eea;
    }
    
    .progress-bar {
        width: 100%;
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        margin: 1rem 0;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Inicializaci√≥n del estado de la sesi√≥n
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1
if 'progress' not in st.session_state:
    st.session_state.progress = 0
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None
if 'document_text' not in st.session_state:
    st.session_state.document_text = None
if 'analysis_complete' not in st.session_state:
    st.session_state.analysis_complete = False
if 'problems_detected' not in st.session_state:
    st.session_state.problems_detected = False
if 'recommendations_generated' not in st.session_state:
    st.session_state.recommendations_generated = False
if 'ai_analyzer' not in st.session_state:
    st.session_state.ai_analyzer = None
if 'ai_connected' not in st.session_state:
    st.session_state.ai_connected = False

# Debug: Mostrar estado en la consola
st.caption(f"Estado actual: Paso {st.session_state.current_step}, Progreso: {st.session_state.progress}%")

# Cache para funciones costosas
@st.cache_data
def process_document_cached(uploaded_file):
    """Cache para el procesamiento de documentos"""
    return process_document(uploaded_file)

def connect_ai_with_key(key: str) -> bool:
    """Guarda la clave en sesi√≥n e inicializa el analizador IA."""
    try:
        if not key:
            return False
        st.session_state.gemini_api_key = key.strip()
        # Inicializa / re-inicializa el analizador con esa clave
        st.session_state.ai_analyzer = AIAnalyzer(api_key=st.session_state.gemini_api_key)
        st.session_state.ai_connected = True
        return True
    except Exception as e:
        st.error(f"‚ùå No se pudo conectar con IA: {e}")
        st.session_state.ai_connected = False
        return False

def ia_connected() -> bool:
    """True si hay analizador IA listo en sesi√≥n."""
    return st.session_state.get("ai_connected", False)

def initialize_ai():
    """Inicializa el analizador de IA"""
    try:
        if st.session_state.ai_analyzer is None:
            api_key = os.getenv("GEMINI_API_KEY")
            if api_key and api_key != "tu_clave_aqui":
                st.session_state.ai_analyzer = AIAnalyzer()
                st.session_state.ai_connected = True
                return True
            else:
                st.warning("‚ö†Ô∏è API Key de Google Gemini no configurada. Usando modo simulado.")
                st.session_state.ai_connected = False
                return False
        return st.session_state.ai_connected
    except Exception as e:
        st.error(f"‚ùå Error al inicializar IA: {str(e)}")
        st.session_state.ai_connected = False
        return False

def main():
    # Configurar p√°gina para mejor UX
    st.set_page_config(
        page_title="Sistema de Contestaci√≥n Autom√°tica",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Header compacto y funcional
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.markdown("""
        <h2 style='margin-bottom: 0; color: #1f77b4;'>ü§ñ Sistema de Contestaci√≥n Autom√°tica</h2>
        <p style='margin-top: 0; color: #666; font-size: 14px;'>An√°lisis inteligente con IA para derechos de petici√≥n</p>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style='text-align: center; padding: 10px; background: #f0f2f6; border-radius: 10px;'>
            <strong>Paso {st.session_state.current_step}/5</strong><br>
            <small>Progreso: {st.session_state.progress}%</small>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if ia_connected():
            st.success("ü§ñ IA Conectada", icon="‚úÖ")
        else:
            st.warning("‚ö†Ô∏è Modo Simulado", icon="‚ö†Ô∏è")
    
    st.divider()
    
    # Sidebar mejorado
    with st.sidebar:
        st.markdown("## üìã Proceso de An√°lisis")
        
        # Barra de progreso visual
        progress_color = "#1f77b4" if st.session_state.progress < 100 else "#28a745"
        st.markdown(f"""
        <div style='background: #f0f2f6; border-radius: 10px; padding: 2px; margin: 10px 0;'>
            <div style='background: {progress_color}; height: 8px; border-radius: 8px; width: {st.session_state.progress}%; transition: width 0.3s;'></div>
        </div>
        """, unsafe_allow_html=True)
        
        # Pasos del proceso con mejor dise√±o
        steps = [
            ("üìÑ Cargar Documento", "Sube el derecho de petici√≥n", 1),
            ("üîç Analizar", "IA analiza el contenido", 2),
            ("‚ö†Ô∏è Detectar Problemas", "IA identifica problemas", 3),
            ("üí° Recomendaciones", "IA sugiere respuestas", 4),
            ("üí¨ Chat", "Interact√∫a con la IA", 5)
        ]
        
        for icon_title, description, step_num in steps:
            if step_num < st.session_state.current_step:
                st.markdown(f"‚úÖ **{icon_title}**")
                st.caption(description)
            elif step_num == st.session_state.current_step:
                st.markdown(f"üîÑ **{icon_title}**", help="Paso actual")
                st.caption(description)
            else:
                st.markdown(f"‚è≥ {icon_title}")
                st.caption(description)
        
        st.divider()
        
        # Debug compacto
        with st.expander("üîß Debug Info", expanded=False):
            st.caption(f"Paso: {st.session_state.current_step}")
            st.caption(f"Progreso: {st.session_state.progress}%")
            st.caption(f"IA: {'Conectada' if ia_connected() else 'Simulada'}")
    
    # Contenido principal con mejor espaciado
    st.markdown(f"## {get_step_title(st.session_state.current_step)}")
    
    if st.session_state.current_step == 1:
        step_1_upload_document()
    elif st.session_state.current_step == 2:
        step_2_analyze_document()
    elif st.session_state.current_step == 3:
        step_3_detect_problems()
    elif st.session_state.current_step == 4:
        step_4_generate_recommendations()
    elif st.session_state.current_step == 5:
        step_5_chat_system()
    else:
        st.error(f"‚ùå Paso no v√°lido: {st.session_state.current_step}")
        st.session_state.current_step = 1
        st.rerun()

def get_step_title(step):
    """Retorna el t√≠tulo del paso actual"""
    titles = {
        1: "üìÑ Paso 1: Cargar Documento",
        2: "üîç Paso 2: An√°lisis del Documento", 
        3: "‚ö†Ô∏è Paso 3: Detecci√≥n de Problemas",
        4: "üí° Paso 4: Generar Recomendaciones",
        5: "üí¨ Paso 5: Chat con la IA"
    }
    return titles.get(step, f"Paso {step}")

def step_1_upload_document():
    # Conexi√≥n autom√°tica de IA (oculta al usuario)
    if not st.session_state.get('ai_connected', False):
        # Intentar conectar autom√°ticamente con la API key del entorno
        api_key = os.getenv("GEMINI_API_KEY", "")
        if api_key:
            if connect_ai_with_key(api_key):
                st.session_state.ai_connected = True
            else:
                st.session_state.ai_connected = False
        else:
            st.session_state.ai_connected = False
    
    # Mostrar estado de conexi√≥n de manera discreta
    if st.session_state.get('ai_connected', False):
        st.success("ü§ñ IA Conectada", icon="‚úÖ")
    else:
        st.info("‚ö†Ô∏è Modo Simulado - La IA funcionar√° con respuestas predefinidas", icon="‚ÑπÔ∏è")
    
    st.divider()
    
    # √Årea de carga de archivos mejorada
    st.markdown("### üìÑ Cargar Documento")
    uploaded_file = st.file_uploader(
        "Selecciona el documento (PDF o DOCX)",
        type=['pdf', 'docx'],
        help="Sube el derecho de petici√≥n que quieres analizar",
        label_visibility="collapsed"
    )
    
    if uploaded_file is not None:
        st.session_state.uploaded_file = uploaded_file
        st.success(f"‚úÖ Documento cargado: {uploaded_file.name}")
        
        # Procesar documento usando cache
        with st.spinner("Procesando documento..."):
            document_text = process_document_cached(uploaded_file)
            if document_text:
                st.session_state.document_text = document_text
                st.success("‚úÖ Texto extra√≠do correctamente")
                
                # Mostrar preview del texto
                with st.expander("üìÑ Vista previa del documento"):
                    st.text_area("Texto extra√≠do:", document_text[:500] + "..." if len(document_text) > 500 else document_text, height=200)
            else:
                st.error("‚ùå Error al procesar el documento")
                return
        
        # Simular informaci√≥n del archivo
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Tama√±o", f"{uploaded_file.size / 1024:.1f} KB")
        with col2:
            st.metric("Tipo", uploaded_file.type)
        with col3:
            st.metric("Fecha", datetime.now().strftime("%d/%m/%Y"))
        
        if st.button("üîç Continuar al An√°lisis", type="primary"):
            st.session_state.current_step = 2
            st.session_state.progress = 20
            st.rerun()

def step_2_analyze_document():
    # Si el an√°lisis no est√° completo, mostrar bot√≥n para iniciar
    if not st.session_state.get('analysis_complete', False):
        st.markdown("### üîç Iniciar An√°lisis")
        st.info("üìã El documento ser√° analizado por la IA para identificar su contenido y estructura")
        
        if st.button("üîç Iniciar An√°lisis con IA", type="primary", key="start_analysis", use_container_width=True):
            with st.spinner("Analizando documento con IA..."):
                # Simular tiempo de an√°lisis
                progress_bar = st.progress(0)
                for i in range(100):
                    time.sleep(0.02)
                    progress_bar.progress(i + 1)
                
                # An√°lisis con IA usando cache
                if initialize_ai() and st.session_state.document_text:
                    try:
                        analysis = st.session_state.ai_analyzer.analyze_document(st.session_state.document_text)
                        if analysis:
                            st.session_state.analysis = analysis
                        else:
                            raise Exception("No se pudo obtener an√°lisis")
                    except Exception as e:
                        error_msg = str(e)
                        if "Cuota de Google Gemini excedida" in error_msg:
                            st.error(f"‚ùå {error_msg}")
                            st.info("üí° La aplicaci√≥n continuar√° en modo simulado. Puedes:")
                            st.info("‚Ä¢ Verificar tu cuota en https://makersuite.google.com/app/apikey")
                            st.info("‚Ä¢ Gemini tiene cuota gratuita generosa")
                            st.info("‚Ä¢ Usar la aplicaci√≥n en modo simulado")
                        else:
                            st.error(f"‚ùå Error en an√°lisis IA: {error_msg}")
                        
                        # Fallback a an√°lisis simulado
                        analysis = {
                            "tipo_documento": "Derecho de Petici√≥n",
                            "longitud": len(st.session_state.document_text),
                            "confianza": 0.7,
                            "palabras_clave": ["petici√≥n", "derecho"],
                            "fecha_analisis": datetime.now().strftime("%d/%m/%Y"),
                            "error": str(e)
                        }
                        st.session_state.analysis = analysis
                else:
                    # An√°lisis simulado
                    analysis = {
                        "tipo_documento": "Derecho de Petici√≥n",
                        "longitud": len(st.session_state.document_text) if st.session_state.document_text else 0,
                        "confianza": 0.85,
                        "palabras_clave": ["petici√≥n", "derecho", "solicitud"],
                        "fecha_analisis": datetime.now().strftime("%d/%m/%Y")
                    }
                    st.session_state.analysis = analysis
                
                st.success("‚úÖ An√°lisis completado")
                st.session_state.analysis_complete = True
                st.rerun()
    
    # Si el an√°lisis est√° completo, mostrar resultados y bot√≥n para continuar
    if st.session_state.get('analysis_complete', False):
        st.success("‚úÖ An√°lisis completado exitosamente")
        
        # Resultados del an√°lisis en un panel mejorado
        with st.container():
            st.markdown("### üìä Resultados del An√°lisis")
            
            # M√©tricas del an√°lisis en cards uniformes
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.markdown(f"""
                <div style='background: #f0f2f6; padding: 15px; border-radius: 10px; text-align: center; min-height: 120px; display: flex; flex-direction: column; justify-content: center;'>
                    <h4 style='margin: 0; color: #1f77b4;'>Tipo</h4>
                    <p style='margin: 5px 0; font-size: 16px; line-height: 1.4;'>{st.session_state.analysis.get("tipo_documento", "N/A")}</p>
                </div>
                """, unsafe_allow_html=True)
            with col2:
                st.markdown(f"""
                <div style='background: #f0f2f6; padding: 15px; border-radius: 10px; text-align: center; min-height: 120px; display: flex; flex-direction: column; justify-content: center;'>
                    <h4 style='margin: 0; color: #1f77b4;'>Longitud</h4>
                    <p style='margin: 5px 0; font-size: 16px; line-height: 1.4;'>{st.session_state.analysis.get('longitud', 0)} caracteres</p>
                </div>
                """, unsafe_allow_html=True)
            with col3:
                confianza = st.session_state.analysis.get('confianza', 0)
                color = "#28a745" if confianza > 0.7 else "#ffc107" if confianza > 0.5 else "#dc3545"
                st.markdown(f"""
                <div style='background: #f0f2f6; padding: 15px; border-radius: 10px; text-align: center; min-height: 120px; display: flex; flex-direction: column; justify-content: center;'>
                    <h4 style='margin: 0; color: #1f77b4;'>Confianza</h4>
                    <p style='margin: 5px 0; font-size: 16px; color: {color}; line-height: 1.4;'>{confianza:.1%}</p>
                </div>
                """, unsafe_allow_html=True)
            with col4:
                st.markdown(f"""
                <div style='background: #f0f2f6; padding: 15px; border-radius: 10px; text-align: center; min-height: 120px; display: flex; flex-direction: column; justify-content: center;'>
                    <h4 style='margin: 0; color: #1f77b4;'>Fecha</h4>
                    <p style='margin: 5px 0; font-size: 16px; line-height: 1.4;'>{st.session_state.analysis.get("fecha_analisis", "N/A")}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Palabras clave en un panel separado
            if 'palabras_clave' in st.session_state.analysis:
                st.markdown("### üîë Palabras Clave Identificadas")
                keywords = st.session_state.analysis['palabras_clave']
                for keyword in keywords:
                    st.markdown(f"‚Ä¢ **{keyword}**")
        
        st.divider()
        
        # Bot√≥n para continuar al siguiente paso
        if st.button("‚ö†Ô∏è Continuar a Detecci√≥n de Problemas", type="primary", use_container_width=True):
            st.session_state.current_step = 3
            st.session_state.progress = 40
            st.rerun()

def step_3_detect_problems():
    # Si los problemas no est√°n detectados, mostrar bot√≥n para iniciar
    if not st.session_state.get('problems_detected', False):
        st.markdown("### ‚ö†Ô∏è Detectar Problemas")
        st.info("üìã La IA analizar√° el documento para identificar problemas formales y materiales que requieren atenci√≥n")
        
        if st.button("‚ö†Ô∏è Detectar Problemas con IA", type="primary", key="detect_problems", use_container_width=True):
            # Debug: Mostrar estado actual
            st.info(f"üîÑ Estado actual: problems_detected = {st.session_state.get('problems_detected', False)}")
            
            with st.spinner("Detectando problemas con IA..."):
                time.sleep(1.5)
                
                # Detecci√≥n con IA usando cache
                if initialize_ai() and st.session_state.document_text and 'analysis' in st.session_state:
                    try:
                        problems = st.session_state.ai_analyzer.detect_problems(
                            st.session_state.document_text, 
                            st.session_state.analysis
                        )
                        if problems:
                            st.session_state.problems = problems
                        else:
                            raise Exception("No se pudieron detectar problemas")
                    except Exception as e:
                        error_msg = str(e)
                        if "Cuota de Google Gemini excedida" in error_msg or "quota" in error_msg.lower():
                            st.warning("‚ö†Ô∏è Cuota de IA excedida - Continuando en modo simulado")
                            st.info("üí° La aplicaci√≥n detectar√° problemas usando an√°lisis predefinido")
                        else:
                            st.error(f"‚ùå Error en detecci√≥n IA: {error_msg}")
                        
                        # Fallback a problemas simulados mejorados
                        problems = [
                            {
                                "tipo": "Falta informaci√≥n",
                                "descripcion": "No se especifica claramente la autoridad requerida",
                                "severidad": "Media",
                                "linea": "N/A"
                            },
                            {
                                "tipo": "Formato",
                                "descripcion": "El documento no tiene n√∫mero de radicado",
                                "severidad": "Alta",
                                "linea": "N/A"
                            },
                            {
                                "tipo": "Fundamentaci√≥n",
                                "descripcion": "No se cita la normativa aplicable",
                                "severidad": "Baja",
                                "linea": "N/A"
                            }
                        ]
                        st.session_state.problems = problems
                else:
                    # Problemas simulados
                    problems = [
                        {
                            "tipo": "Falta informaci√≥n",
                            "descripcion": "No se especifica claramente la autoridad requerida",
                            "severidad": "Media",
                            "linea": "N/A"
                        },
                        {
                            "tipo": "Formato",
                            "descripcion": "El documento no tiene n√∫mero de radicado",
                            "severidad": "Alta",
                            "linea": "N/A"
                        },
                        {
                            "tipo": "Fundamentaci√≥n",
                            "descripcion": "No se cita la normativa aplicable",
                            "severidad": "Baja",
                            "linea": "N/A"
                        }
                    ]
                    st.session_state.problems = problems
                
                st.success("‚úÖ Problemas detectados")
                st.session_state.problems_detected = True
                # Debug: Confirmar actualizaci√≥n
                st.success(f"‚úÖ Estado actualizado: problems_detected = {st.session_state.problems_detected}")
                st.rerun()
    
    # Si los problemas est√°n detectados, mostrar resultados y bot√≥n para continuar
    if st.session_state.get('problems_detected', False):
        st.success("‚úÖ Problemas detectados exitosamente")
        
        # Mostrar problemas con informaci√≥n detallada
        st.markdown("### üìã Problemas Identificados")
        for i, problem in enumerate(st.session_state.problems, 1):
            # Validar que problem sea un diccionario
            if not isinstance(problem, dict):
                st.warning(f"‚ö†Ô∏è Problema {i} tiene formato inv√°lido: {type(problem)}")
                continue
            
            # Obtener valores con validaci√≥n
            tipo = problem.get('tipo', f'Problema {i}')
            descripcion = problem.get('descripcion', 'Sin descripci√≥n')
            severidad = problem.get('severidad', 'N/A')
            
            # Color seg√∫n severidad
            if severidad == "Alta":
                st.error(f"**{tipo}** - {descripcion}")
            elif severidad == "Media":
                st.warning(f"**{tipo}** - {descripcion}")
            else:
                st.info(f"**{tipo}** - {descripcion}")
            
            # Informaci√≥n detallada
            col1, col2 = st.columns(2)
            with col1:
                st.caption(f"**Tipo:** {tipo}")
                st.caption(f"**Severidad:** {severidad}")
                if 'fundamento_legal' in problem:
                    st.caption(f"**Fundamento:** {problem['fundamento_legal']}")
            with col2:
                st.caption(f"**L√≠nea:** {problem.get('linea', 'N/A')}")
                if 'impacto' in problem:
                    st.caption(f"**Impacto:** {problem['impacto']}")
            
            st.divider()
        
        st.divider()
        
        # Bot√≥n para continuar al siguiente paso
        if st.button("üí° Continuar a Recomendaciones", type="primary", use_container_width=True):
            st.session_state.current_step = 4
            st.session_state.progress = 60
            st.rerun()

def step_4_generate_recommendations():
    # Si las recomendaciones no est√°n generadas, mostrar bot√≥n para iniciar
    if not st.session_state.get('recommendations_generated', False):
        st.markdown("### üí° Generar Recomendaciones")
        st.info("üìã La IA analizar√° los problemas detectados y generar√° recomendaciones espec√≠ficas para mejorar la contestaci√≥n")
        
        if st.button("üí° Generar Recomendaciones con IA", type="primary", key="generate_recommendations", use_container_width=True):
            # Debug: Mostrar estado actual
            st.info(f"üîÑ Estado actual: recommendations_generated = {st.session_state.get('recommendations_generated', False)}")
            
            with st.spinner("Generando recomendaciones con IA..."):
                time.sleep(1.5)
                
                # Generaci√≥n con IA usando cache
                if initialize_ai() and st.session_state.document_text and 'problems' in st.session_state:
                    try:
                        recommendations = st.session_state.ai_analyzer.generate_recommendations(
                            st.session_state.document_text,
                            st.session_state.problems
                        )
                        if recommendations:
                            st.session_state.recommendations = recommendations
                        else:
                            raise Exception("No se pudieron generar recomendaciones")
                    except Exception as e:
                        error_msg = str(e)
                        if "Cuota de Google Gemini excedida" in error_msg or "quota" in error_msg.lower():
                            st.warning("‚ö†Ô∏è Cuota de IA excedida - Continuando en modo simulado")
                            st.info("üí° La aplicaci√≥n generar√° recomendaciones usando an√°lisis predefinido")
                        else:
                            st.error(f"‚ùå Error en generaci√≥n IA: {error_msg}")
                        
                        # Fallback a recomendaciones simuladas mejoradas
                        recommendations = [
                            {
                                "titulo": "Fundamentaci√≥n legal",
                                "descripcion": "Incluir citas espec√≠ficas de la normativa aplicable",
                                "prioridad": "Alta",
                                "accion": "Referenciar C√≥digo de Procedimiento Administrativo"
                            },
                            {
                                "titulo": "Estructurar respuesta",
                                "descripcion": "Organizar la contestaci√≥n en secciones claras",
                                "prioridad": "Media",
                                "accion": "Usar formato estructurado"
                            },
                            {
                                "titulo": "Competencia clara",
                                "descripcion": "Especificar la autoridad competente para resolver la petici√≥n",
                                "prioridad": "Alta",
                                "accion": "Incluir fundamento legal de competencia"
                            }
                        ]
                        st.session_state.recommendations = recommendations
                else:
                    # Recomendaciones simuladas
                    recommendations = [
                        {
                            "titulo": "Fundamentaci√≥n legal",
                            "descripcion": "Incluir citas espec√≠ficas de la normativa aplicable",
                            "prioridad": "Alta",
                            "accion": "Referenciar C√≥digo de Procedimiento Administrativo"
                        },
                        {
                            "titulo": "Estructurar respuesta",
                            "descripcion": "Organizar la contestaci√≥n en secciones claras",
                            "prioridad": "Media",
                            "accion": "Usar formato estructurado"
                        }
                    ]
                    st.session_state.recommendations = recommendations
                
                st.success("‚úÖ Recomendaciones generadas")
                
                # Mostrar recomendaciones con informaci√≥n detallada
                for i, rec in enumerate(st.session_state.recommendations, 1):
                    # Validar que rec sea un diccionario
                    if not isinstance(rec, dict):
                        st.warning(f"‚ö†Ô∏è Recomendaci√≥n {i} tiene formato inv√°lido: {type(rec)}")
                        continue
                    
                    # Obtener valores con validaci√≥n
                    titulo = rec.get('titulo', f'Recomendaci√≥n {i}')
                    descripcion = rec.get('descripcion', 'Sin descripci√≥n')
                    prioridad = rec.get('prioridad', 'N/A')
                    accion = rec.get('accion', 'N/A')
                    
                    # Color seg√∫n prioridad
                    if prioridad == "Alta":
                        st.success(f"**{titulo}** - {descripcion}")
                    else:
                        st.info(f"**{titulo}** - {descripcion}")
                    
                    # Informaci√≥n detallada
                    col1, col2 = st.columns(2)
                    with col1:
                        st.caption(f"**Prioridad:** {prioridad}")
                        st.caption(f"**Acci√≥n:** {accion}")
                        if 'fundamento_legal' in rec:
                            st.caption(f"**Fundamento:** {rec['fundamento_legal']}")
                    with col2:
                        if 'tiempo_estimado' in rec:
                            st.caption(f"**Tiempo:** {rec['tiempo_estimado']}")
                        if 'beneficio' in rec:
                            st.caption(f"**Beneficio:** {rec['beneficio']}")
                    
                    st.divider()
                
                st.session_state.recommendations_generated = True
                # Debug: Confirmar actualizaci√≥n
                st.success(f"‚úÖ Estado actualizado: recommendations_generated = {st.session_state.recommendations_generated}")
                st.rerun()
    
    # Si las recomendaciones est√°n generadas, mostrar resultados y bot√≥n para continuar
    if st.session_state.get('recommendations_generated', False):
        st.success("‚úÖ Recomendaciones generadas exitosamente")
        
        # Mostrar recomendaciones con informaci√≥n detallada
        st.markdown("### üìã Recomendaciones Generadas")
        for i, rec in enumerate(st.session_state.recommendations, 1):
            # Validar que rec sea un diccionario
            if not isinstance(rec, dict):
                st.warning(f"‚ö†Ô∏è Recomendaci√≥n {i} tiene formato inv√°lido: {type(rec)}")
                continue
            
            # Obtener valores con validaci√≥n
            titulo = rec.get('titulo', f'Recomendaci√≥n {i}')
            descripcion = rec.get('descripcion', 'Sin descripci√≥n')
            prioridad = rec.get('prioridad', 'N/A')
            accion = rec.get('accion', 'N/A')
            
            # Color seg√∫n prioridad
            if prioridad == "Alta":
                st.success(f"**{titulo}** - {descripcion}")
            else:
                st.info(f"**{titulo}** - {descripcion}")
            
            # Informaci√≥n detallada
            col1, col2 = st.columns(2)
            with col1:
                st.caption(f"**Prioridad:** {prioridad}")
                st.caption(f"**Acci√≥n:** {accion}")
                if 'fundamento_legal' in rec:
                    st.caption(f"**Fundamento:** {rec['fundamento_legal']}")
            with col2:
                if 'tiempo_estimado' in rec:
                    st.caption(f"**Tiempo:** {rec['tiempo_estimado']}")
                if 'beneficio' in rec:
                    st.caption(f"**Beneficio:** {rec['beneficio']}")
            
            st.divider()
        
        st.divider()
        
        # Bot√≥n para continuar al siguiente paso
        if st.button("üí¨ Continuar al Chat", type="primary", key="continue_to_chat", use_container_width=True):
            # Debug: Mostrar el cambio de paso
            st.info(f"üîÑ Cambiando de paso {st.session_state.current_step} a paso 5")
            
            # Actualizar estado
            st.session_state.current_step = 5
            st.session_state.progress = 80
            
            # Debug: Confirmar el cambio
            st.success(f"‚úÖ Paso actualizado a: {st.session_state.current_step}")
            
            # Forzar rerun para actualizar la interfaz
            st.rerun()

def step_5_chat_system():
    st.markdown("## üí¨ Paso 5: Chat con la IA")
    
    # Asegurar que chat_history est√© inicializado
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    st.info("üí° Puedes hacer preguntas sobre el an√°lisis, problemas o recomendaciones")
    
    # Mostrar contexto disponible
    with st.expander("üìã Contexto Disponible"):
        if 'analysis' in st.session_state:
            st.success("‚úÖ An√°lisis del documento disponible")
        if 'problems' in st.session_state:
            st.success(f"‚úÖ {len(st.session_state.problems)} problemas detectados")
        if 'recommendations' in st.session_state:
            st.success(f"‚úÖ {len(st.session_state.recommendations)} recomendaciones generadas")
    
    # Chat input con mejor UX
    col1, col2 = st.columns([3, 1])
    with col1:
        user_question = st.text_input(
            "Escribe tu pregunta:", 
            placeholder="Ej: ¬øC√≥mo mejorar la contestaci√≥n? ¬øQu√© problemas son m√°s cr√≠ticos? ¬øC√≥mo implementar las recomendaciones?",
            key="chat_input"
        )
    with col2:
        send_button = st.button("üí¨ Enviar", type="primary", use_container_width=True)
    
    # Procesar pregunta cuando se env√≠a
    if send_button and user_question and user_question.strip():
            with st.spinner("Procesando tu pregunta con IA..."):
                time.sleep(1)
                
                # Respuesta con IA
                if initialize_ai() and 'analysis' in st.session_state:
                    try:
                        context = {
                            "analisis": st.session_state.analysis,
                            "problemas": st.session_state.problems if 'problems' in st.session_state else [],
                            "recomendaciones": st.session_state.recommendations if 'recommendations' in st.session_state else []
                        }
                        response = st.session_state.ai_analyzer.chat_response(user_question, context)
                    except Exception as e:
                        error_msg = str(e)
                        if "Cuota de Google Gemini excedida" in error_msg or "quota" in error_msg.lower():
                            response = "Lo siento, actualmente no puedo procesar tu pregunta debido a limitaciones t√©cnicas. Te sugiero revisar las recomendaciones y problemas ya generados para obtener orientaci√≥n sobre c√≥mo mejorar la contestaci√≥n."
                        else:
                            response = f"Lo siento, hubo un error al procesar tu pregunta: {error_msg}"
                else:
                    # Respuestas simuladas mejoradas y espec√≠ficas
                    if "mejorar" in user_question.lower() or "contestaci√≥n" in user_question.lower():
                        response = "Para mejorar la contestaci√≥n, te recomiendo: 1) Incluir fundamentaci√≥n legal espec√≠fica citando el C√≥digo de Procedimiento Administrativo, 2) Especificar claramente la competencia de la entidad, 3) Estructurar la respuesta en secciones claras, y 4) Asegurar que todos los elementos requeridos est√©n presentes."
                    elif "problema" in user_question.lower() or "cr√≠tico" in user_question.lower():
                        response = "Los problemas m√°s cr√≠ticos identificados son: falta de fundamentaci√≥n legal espec√≠fica, ausencia de n√∫mero de radicado, y no especificaci√≥n clara de la autoridad competente. Estos elementos son esenciales para una contestaci√≥n v√°lida."
                    elif "recomendaci√≥n" in user_question.lower() or "prioritaria" in user_question.lower():
                        response = "Las recomendaciones prioritarias son: 1) Incluir citas espec√≠ficas de la normativa aplicable, 2) Especificar la autoridad competente con fundamento legal, y 3) Usar un formato estructurado para la contestaci√≥n."
                    elif "normativa" in user_question.lower() or "citar" in user_question.lower():
                        response = "Debes citar espec√≠ficamente: el C√≥digo de Procedimiento Administrativo, la Constituci√≥n Pol√≠tica en lo relacionado con el derecho de petici√≥n, y las normas espec√≠ficas de tu entidad que regulen el tr√°mite de peticiones."
                    elif "estructurar" in user_question.lower() or "formato" in user_question.lower():
                        response = "Para estructurar mejor la contestaci√≥n: 1) Encabezado con datos de la entidad, 2) Referencia al derecho de petici√≥n, 3) Fundamentaci√≥n legal espec√≠fica, 4) Decisi√≥n o respuesta clara, 5) Recursos disponibles, y 6) Firma de la autoridad competente."
                    else:
                        responses = [
                            "Gracias por tu pregunta. Bas√°ndome en el an√°lisis del documento, puedo ayudarte con informaci√≥n sobre los problemas detectados y las recomendaciones generadas.",
                            "El sistema ha identificado varios problemas en el documento que requieren atenci√≥n. Te recomiendo revisar las recomendaciones generadas para mejorar la contestaci√≥n.",
                            "Bas√°ndome en el an√°lisis realizado, puedo sugerir que consideres incluir fundamentaci√≥n legal espec√≠fica y citar las normas aplicables.",
                            "Para una contestaci√≥n m√°s efectiva, aseg√∫rate de especificar claramente la competencia de la entidad y fundamentar adecuadamente las decisiones.",
                            "Seg√∫n el an√°lisis del documento, es importante estructurar la respuesta de manera clara y concisa, incluyendo todos los elementos requeridos por la normativa vigente.",
                            "El sistema detect√≥ que faltan elementos importantes en el documento. Te sugiero revisar las recomendaciones para asegurar una contestaci√≥n completa y conforme a la ley."
                        ]
                        response = random.choice(responses)
                
                # Agregar al historial
                st.session_state.chat_history.append({
                    "user": user_question,
                    "system": response,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
                
                # Limpiar el input despu√©s de enviar
                st.rerun()
    
    # Mostrar historial de chat mejorado
    if st.session_state.chat_history:
        st.markdown("### üìù Historial del Chat")
        
        # Mostrar la conversaci√≥n m√°s reciente primero
        for i, chat in enumerate(reversed(st.session_state.chat_history), 1):
            with st.expander(f"üí¨ Conversaci√≥n {len(st.session_state.chat_history) - i + 1} - {chat.get('timestamp', '')}"):
                st.markdown(f"**üë§ Usuario:** {chat['user']}")
                st.markdown(f"**ü§ñ IA:** {chat['system']}")
    
    # Sugerencias de preguntas
    st.markdown("### üí° Sugerencias de Preguntas")
    suggestions = [
        "¬øCu√°les son los problemas m√°s cr√≠ticos del documento?",
        "¬øC√≥mo puedo mejorar la fundamentaci√≥n legal?",
        "¬øQu√© recomendaciones son prioritarias?",
        "¬øC√≥mo estructurar mejor la contestaci√≥n?",
        "¬øQu√© normativa debo citar espec√≠ficamente?"
    ]
    
    cols = st.columns(2)
    for i, suggestion in enumerate(suggestions):
        with cols[i % 2]:
            if st.button(suggestion, key=f"suggestion_{i}"):
                # Simular que se hace clic en la sugerencia
                st.session_state.suggested_question = suggestion
                st.rerun()
    
    # Bot√≥n para reiniciar
    st.divider()
    if st.button("üîÑ Reiniciar Proceso", type="secondary"):
        # Limpiar cache
        process_document_cached.clear()
        
        # Resetear estado
        st.session_state.current_step = 1
        st.session_state.progress = 0
        st.session_state.chat_history = []
        st.session_state.uploaded_file = None
        st.session_state.document_text = None
        st.session_state.analysis_complete = False
        st.session_state.problems_detected = False
        st.session_state.recommendations_generated = False
        st.session_state.ai_connected = False
        st.rerun()

if __name__ == "__main__":
    main() 